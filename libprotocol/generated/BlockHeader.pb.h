// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BlockHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BlockHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Signature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BlockHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BlockHeader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BlockHeader_2eproto;
namespace bcos {
namespace protocol {
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class BlockHeaderHashFields;
class BlockHeaderHashFieldsDefaultTypeInternal;
extern BlockHeaderHashFieldsDefaultTypeInternal _BlockHeaderHashFields_default_instance_;
}  // namespace protocol
}  // namespace bcos
PROTOBUF_NAMESPACE_OPEN
template<> ::bcos::protocol::BlockHeader* Arena::CreateMaybeMessage<::bcos::protocol::BlockHeader>(Arena*);
template<> ::bcos::protocol::BlockHeaderHashFields* Arena::CreateMaybeMessage<::bcos::protocol::BlockHeaderHashFields>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bcos {
namespace protocol {

// ===================================================================

class BlockHeaderHashFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.BlockHeaderHashFields) */ {
 public:
  inline BlockHeaderHashFields() : BlockHeaderHashFields(nullptr) {}
  virtual ~BlockHeaderHashFields();

  BlockHeaderHashFields(const BlockHeaderHashFields& from);
  BlockHeaderHashFields(BlockHeaderHashFields&& from) noexcept
    : BlockHeaderHashFields() {
    *this = ::std::move(from);
  }

  inline BlockHeaderHashFields& operator=(const BlockHeaderHashFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeaderHashFields& operator=(BlockHeaderHashFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeaderHashFields& default_instance();

  static inline const BlockHeaderHashFields* internal_default_instance() {
    return reinterpret_cast<const BlockHeaderHashFields*>(
               &_BlockHeaderHashFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockHeaderHashFields& a, BlockHeaderHashFields& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeaderHashFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeaderHashFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeaderHashFields* New() const final {
    return CreateMaybeMessage<BlockHeaderHashFields>(nullptr);
  }

  BlockHeaderHashFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeaderHashFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeaderHashFields& from);
  void MergeFrom(const BlockHeaderHashFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeaderHashFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.BlockHeaderHashFields";
  }
  protected:
  explicit BlockHeaderHashFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BlockHeader_2eproto);
    return ::descriptor_table_BlockHeader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSealerListFieldNumber = 11,
    kParentHashFieldNumber = 2,
    kTxsRootFieldNumber = 3,
    kReceiptsRootFieldNumber = 4,
    kStateRootFieldNumber = 5,
    kLogBloomFieldNumber = 6,
    kGasUsedFieldNumber = 8,
    kExtraDataFieldNumber = 12,
    kNumberFieldNumber = 7,
    kTimestampFieldNumber = 9,
    kSealerFieldNumber = 10,
    kVersionFieldNumber = 1,
  };
  // repeated bytes sealerList = 11;
  int sealerlist_size() const;
  private:
  int _internal_sealerlist_size() const;
  public:
  void clear_sealerlist();
  const std::string& sealerlist(int index) const;
  std::string* mutable_sealerlist(int index);
  void set_sealerlist(int index, const std::string& value);
  void set_sealerlist(int index, std::string&& value);
  void set_sealerlist(int index, const char* value);
  void set_sealerlist(int index, const void* value, size_t size);
  std::string* add_sealerlist();
  void add_sealerlist(const std::string& value);
  void add_sealerlist(std::string&& value);
  void add_sealerlist(const char* value);
  void add_sealerlist(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sealerlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sealerlist();
  private:
  const std::string& _internal_sealerlist(int index) const;
  std::string* _internal_add_sealerlist();
  public:

  // bytes parentHash = 2;
  void clear_parenthash();
  const std::string& parenthash() const;
  void set_parenthash(const std::string& value);
  void set_parenthash(std::string&& value);
  void set_parenthash(const char* value);
  void set_parenthash(const void* value, size_t size);
  std::string* mutable_parenthash();
  std::string* release_parenthash();
  void set_allocated_parenthash(std::string* parenthash);
  private:
  const std::string& _internal_parenthash() const;
  void _internal_set_parenthash(const std::string& value);
  std::string* _internal_mutable_parenthash();
  public:

  // bytes txsRoot = 3;
  void clear_txsroot();
  const std::string& txsroot() const;
  void set_txsroot(const std::string& value);
  void set_txsroot(std::string&& value);
  void set_txsroot(const char* value);
  void set_txsroot(const void* value, size_t size);
  std::string* mutable_txsroot();
  std::string* release_txsroot();
  void set_allocated_txsroot(std::string* txsroot);
  private:
  const std::string& _internal_txsroot() const;
  void _internal_set_txsroot(const std::string& value);
  std::string* _internal_mutable_txsroot();
  public:

  // bytes receiptsRoot = 4;
  void clear_receiptsroot();
  const std::string& receiptsroot() const;
  void set_receiptsroot(const std::string& value);
  void set_receiptsroot(std::string&& value);
  void set_receiptsroot(const char* value);
  void set_receiptsroot(const void* value, size_t size);
  std::string* mutable_receiptsroot();
  std::string* release_receiptsroot();
  void set_allocated_receiptsroot(std::string* receiptsroot);
  private:
  const std::string& _internal_receiptsroot() const;
  void _internal_set_receiptsroot(const std::string& value);
  std::string* _internal_mutable_receiptsroot();
  public:

  // bytes stateRoot = 5;
  void clear_stateroot();
  const std::string& stateroot() const;
  void set_stateroot(const std::string& value);
  void set_stateroot(std::string&& value);
  void set_stateroot(const char* value);
  void set_stateroot(const void* value, size_t size);
  std::string* mutable_stateroot();
  std::string* release_stateroot();
  void set_allocated_stateroot(std::string* stateroot);
  private:
  const std::string& _internal_stateroot() const;
  void _internal_set_stateroot(const std::string& value);
  std::string* _internal_mutable_stateroot();
  public:

  // bytes logBloom = 6;
  void clear_logbloom();
  const std::string& logbloom() const;
  void set_logbloom(const std::string& value);
  void set_logbloom(std::string&& value);
  void set_logbloom(const char* value);
  void set_logbloom(const void* value, size_t size);
  std::string* mutable_logbloom();
  std::string* release_logbloom();
  void set_allocated_logbloom(std::string* logbloom);
  private:
  const std::string& _internal_logbloom() const;
  void _internal_set_logbloom(const std::string& value);
  std::string* _internal_mutable_logbloom();
  public:

  // bytes gasUsed = 8;
  void clear_gasused();
  const std::string& gasused() const;
  void set_gasused(const std::string& value);
  void set_gasused(std::string&& value);
  void set_gasused(const char* value);
  void set_gasused(const void* value, size_t size);
  std::string* mutable_gasused();
  std::string* release_gasused();
  void set_allocated_gasused(std::string* gasused);
  private:
  const std::string& _internal_gasused() const;
  void _internal_set_gasused(const std::string& value);
  std::string* _internal_mutable_gasused();
  public:

  // bytes extraData = 12;
  void clear_extradata();
  const std::string& extradata() const;
  void set_extradata(const std::string& value);
  void set_extradata(std::string&& value);
  void set_extradata(const char* value);
  void set_extradata(const void* value, size_t size);
  std::string* mutable_extradata();
  std::string* release_extradata();
  void set_allocated_extradata(std::string* extradata);
  private:
  const std::string& _internal_extradata() const;
  void _internal_set_extradata(const std::string& value);
  std::string* _internal_mutable_extradata();
  public:

  // int64 number = 7;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 9;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sealer = 10;
  void clear_sealer();
  ::PROTOBUF_NAMESPACE_ID::int64 sealer() const;
  void set_sealer(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sealer() const;
  void _internal_set_sealer(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.BlockHeaderHashFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sealerlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txsroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiptsroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stateroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logbloom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasused_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extradata_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 sealer_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BlockHeader_2eproto;
};
// -------------------------------------------------------------------

class BlockHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.BlockHeader) */ {
 public:
  inline BlockHeader() : BlockHeader(nullptr) {}
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.BlockHeader";
  }
  protected:
  explicit BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BlockHeader_2eproto);
    return ::descriptor_table_BlockHeader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureListFieldNumber = 2,
    kHashFieldsDataFieldNumber = 1,
  };
  // repeated .bcos.protocol.Signature signatureList = 2;
  int signaturelist_size() const;
  private:
  int _internal_signaturelist_size() const;
  public:
  void clear_signaturelist();
  ::bcos::protocol::Signature* mutable_signaturelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::Signature >*
      mutable_signaturelist();
  private:
  const ::bcos::protocol::Signature& _internal_signaturelist(int index) const;
  ::bcos::protocol::Signature* _internal_add_signaturelist();
  public:
  const ::bcos::protocol::Signature& signaturelist(int index) const;
  ::bcos::protocol::Signature* add_signaturelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::Signature >&
      signaturelist() const;

  // bytes hashFieldsData = 1;
  void clear_hashfieldsdata();
  const std::string& hashfieldsdata() const;
  void set_hashfieldsdata(const std::string& value);
  void set_hashfieldsdata(std::string&& value);
  void set_hashfieldsdata(const char* value);
  void set_hashfieldsdata(const void* value, size_t size);
  std::string* mutable_hashfieldsdata();
  std::string* release_hashfieldsdata();
  void set_allocated_hashfieldsdata(std::string* hashfieldsdata);
  private:
  const std::string& _internal_hashfieldsdata() const;
  void _internal_set_hashfieldsdata(const std::string& value);
  std::string* _internal_mutable_hashfieldsdata();
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.BlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::Signature > signaturelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashfieldsdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BlockHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockHeaderHashFields

// int32 version = 1;
inline void BlockHeaderHashFields::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockHeaderHashFields::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockHeaderHashFields::version() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.version)
  return _internal_version();
}
inline void BlockHeaderHashFields::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void BlockHeaderHashFields::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.version)
}

// bytes parentHash = 2;
inline void BlockHeaderHashFields::clear_parenthash() {
  parenthash_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::parenthash() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.parentHash)
  return _internal_parenthash();
}
inline void BlockHeaderHashFields::set_parenthash(const std::string& value) {
  _internal_set_parenthash(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.parentHash)
}
inline std::string* BlockHeaderHashFields::mutable_parenthash() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.parentHash)
  return _internal_mutable_parenthash();
}
inline const std::string& BlockHeaderHashFields::_internal_parenthash() const {
  return parenthash_.Get();
}
inline void BlockHeaderHashFields::_internal_set_parenthash(const std::string& value) {
  
  parenthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_parenthash(std::string&& value) {
  
  parenthash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.parentHash)
}
inline void BlockHeaderHashFields::set_parenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parenthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.parentHash)
}
inline void BlockHeaderHashFields::set_parenthash(const void* value,
    size_t size) {
  
  parenthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.parentHash)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_parenthash() {
  
  return parenthash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_parenthash() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.parentHash)
  return parenthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_parenthash(std::string* parenthash) {
  if (parenthash != nullptr) {
    
  } else {
    
  }
  parenthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parenthash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.parentHash)
}

// bytes txsRoot = 3;
inline void BlockHeaderHashFields::clear_txsroot() {
  txsroot_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::txsroot() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.txsRoot)
  return _internal_txsroot();
}
inline void BlockHeaderHashFields::set_txsroot(const std::string& value) {
  _internal_set_txsroot(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.txsRoot)
}
inline std::string* BlockHeaderHashFields::mutable_txsroot() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.txsRoot)
  return _internal_mutable_txsroot();
}
inline const std::string& BlockHeaderHashFields::_internal_txsroot() const {
  return txsroot_.Get();
}
inline void BlockHeaderHashFields::_internal_set_txsroot(const std::string& value) {
  
  txsroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_txsroot(std::string&& value) {
  
  txsroot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.txsRoot)
}
inline void BlockHeaderHashFields::set_txsroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txsroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.txsRoot)
}
inline void BlockHeaderHashFields::set_txsroot(const void* value,
    size_t size) {
  
  txsroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.txsRoot)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_txsroot() {
  
  return txsroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_txsroot() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.txsRoot)
  return txsroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_txsroot(std::string* txsroot) {
  if (txsroot != nullptr) {
    
  } else {
    
  }
  txsroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txsroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.txsRoot)
}

// bytes receiptsRoot = 4;
inline void BlockHeaderHashFields::clear_receiptsroot() {
  receiptsroot_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::receiptsroot() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
  return _internal_receiptsroot();
}
inline void BlockHeaderHashFields::set_receiptsroot(const std::string& value) {
  _internal_set_receiptsroot(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
}
inline std::string* BlockHeaderHashFields::mutable_receiptsroot() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
  return _internal_mutable_receiptsroot();
}
inline const std::string& BlockHeaderHashFields::_internal_receiptsroot() const {
  return receiptsroot_.Get();
}
inline void BlockHeaderHashFields::_internal_set_receiptsroot(const std::string& value) {
  
  receiptsroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_receiptsroot(std::string&& value) {
  
  receiptsroot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
}
inline void BlockHeaderHashFields::set_receiptsroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiptsroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
}
inline void BlockHeaderHashFields::set_receiptsroot(const void* value,
    size_t size) {
  
  receiptsroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_receiptsroot() {
  
  return receiptsroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_receiptsroot() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
  return receiptsroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_receiptsroot(std::string* receiptsroot) {
  if (receiptsroot != nullptr) {
    
  } else {
    
  }
  receiptsroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiptsroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.receiptsRoot)
}

// bytes stateRoot = 5;
inline void BlockHeaderHashFields::clear_stateroot() {
  stateroot_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::stateroot() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.stateRoot)
  return _internal_stateroot();
}
inline void BlockHeaderHashFields::set_stateroot(const std::string& value) {
  _internal_set_stateroot(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.stateRoot)
}
inline std::string* BlockHeaderHashFields::mutable_stateroot() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.stateRoot)
  return _internal_mutable_stateroot();
}
inline const std::string& BlockHeaderHashFields::_internal_stateroot() const {
  return stateroot_.Get();
}
inline void BlockHeaderHashFields::_internal_set_stateroot(const std::string& value) {
  
  stateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_stateroot(std::string&& value) {
  
  stateroot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.stateRoot)
}
inline void BlockHeaderHashFields::set_stateroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.stateRoot)
}
inline void BlockHeaderHashFields::set_stateroot(const void* value,
    size_t size) {
  
  stateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.stateRoot)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_stateroot() {
  
  return stateroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_stateroot() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.stateRoot)
  return stateroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_stateroot(std::string* stateroot) {
  if (stateroot != nullptr) {
    
  } else {
    
  }
  stateroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stateroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.stateRoot)
}

// bytes logBloom = 6;
inline void BlockHeaderHashFields::clear_logbloom() {
  logbloom_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::logbloom() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.logBloom)
  return _internal_logbloom();
}
inline void BlockHeaderHashFields::set_logbloom(const std::string& value) {
  _internal_set_logbloom(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.logBloom)
}
inline std::string* BlockHeaderHashFields::mutable_logbloom() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.logBloom)
  return _internal_mutable_logbloom();
}
inline const std::string& BlockHeaderHashFields::_internal_logbloom() const {
  return logbloom_.Get();
}
inline void BlockHeaderHashFields::_internal_set_logbloom(const std::string& value) {
  
  logbloom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_logbloom(std::string&& value) {
  
  logbloom_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.logBloom)
}
inline void BlockHeaderHashFields::set_logbloom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logbloom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.logBloom)
}
inline void BlockHeaderHashFields::set_logbloom(const void* value,
    size_t size) {
  
  logbloom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.logBloom)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_logbloom() {
  
  return logbloom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_logbloom() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.logBloom)
  return logbloom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_logbloom(std::string* logbloom) {
  if (logbloom != nullptr) {
    
  } else {
    
  }
  logbloom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logbloom,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.logBloom)
}

// int64 number = 7;
inline void BlockHeaderHashFields::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeaderHashFields::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeaderHashFields::number() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.number)
  return _internal_number();
}
inline void BlockHeaderHashFields::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
}
inline void BlockHeaderHashFields::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.number)
}

// bytes gasUsed = 8;
inline void BlockHeaderHashFields::clear_gasused() {
  gasused_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::gasused() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.gasUsed)
  return _internal_gasused();
}
inline void BlockHeaderHashFields::set_gasused(const std::string& value) {
  _internal_set_gasused(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.gasUsed)
}
inline std::string* BlockHeaderHashFields::mutable_gasused() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.gasUsed)
  return _internal_mutable_gasused();
}
inline const std::string& BlockHeaderHashFields::_internal_gasused() const {
  return gasused_.Get();
}
inline void BlockHeaderHashFields::_internal_set_gasused(const std::string& value) {
  
  gasused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_gasused(std::string&& value) {
  
  gasused_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.gasUsed)
}
inline void BlockHeaderHashFields::set_gasused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.gasUsed)
}
inline void BlockHeaderHashFields::set_gasused(const void* value,
    size_t size) {
  
  gasused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.gasUsed)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_gasused() {
  
  return gasused_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_gasused() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.gasUsed)
  return gasused_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_gasused(std::string* gasused) {
  if (gasused != nullptr) {
    
  } else {
    
  }
  gasused_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasused,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.gasUsed)
}

// int64 timestamp = 9;
inline void BlockHeaderHashFields::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeaderHashFields::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeaderHashFields::timestamp() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.timestamp)
  return _internal_timestamp();
}
inline void BlockHeaderHashFields::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BlockHeaderHashFields::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.timestamp)
}

// int64 sealer = 10;
inline void BlockHeaderHashFields::clear_sealer() {
  sealer_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeaderHashFields::_internal_sealer() const {
  return sealer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeaderHashFields::sealer() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.sealer)
  return _internal_sealer();
}
inline void BlockHeaderHashFields::_internal_set_sealer(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sealer_ = value;
}
inline void BlockHeaderHashFields::set_sealer(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sealer(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.sealer)
}

// repeated bytes sealerList = 11;
inline int BlockHeaderHashFields::_internal_sealerlist_size() const {
  return sealerlist_.size();
}
inline int BlockHeaderHashFields::sealerlist_size() const {
  return _internal_sealerlist_size();
}
inline void BlockHeaderHashFields::clear_sealerlist() {
  sealerlist_.Clear();
}
inline std::string* BlockHeaderHashFields::add_sealerlist() {
  // @@protoc_insertion_point(field_add_mutable:bcos.protocol.BlockHeaderHashFields.sealerList)
  return _internal_add_sealerlist();
}
inline const std::string& BlockHeaderHashFields::_internal_sealerlist(int index) const {
  return sealerlist_.Get(index);
}
inline const std::string& BlockHeaderHashFields::sealerlist(int index) const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.sealerList)
  return _internal_sealerlist(index);
}
inline std::string* BlockHeaderHashFields::mutable_sealerlist(int index) {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.sealerList)
  return sealerlist_.Mutable(index);
}
inline void BlockHeaderHashFields::set_sealerlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.sealerList)
  sealerlist_.Mutable(index)->assign(value);
}
inline void BlockHeaderHashFields::set_sealerlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.sealerList)
  sealerlist_.Mutable(index)->assign(std::move(value));
}
inline void BlockHeaderHashFields::set_sealerlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sealerlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.sealerList)
}
inline void BlockHeaderHashFields::set_sealerlist(int index, const void* value, size_t size) {
  sealerlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.sealerList)
}
inline std::string* BlockHeaderHashFields::_internal_add_sealerlist() {
  return sealerlist_.Add();
}
inline void BlockHeaderHashFields::add_sealerlist(const std::string& value) {
  sealerlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bcos.protocol.BlockHeaderHashFields.sealerList)
}
inline void BlockHeaderHashFields::add_sealerlist(std::string&& value) {
  sealerlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bcos.protocol.BlockHeaderHashFields.sealerList)
}
inline void BlockHeaderHashFields::add_sealerlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sealerlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bcos.protocol.BlockHeaderHashFields.sealerList)
}
inline void BlockHeaderHashFields::add_sealerlist(const void* value, size_t size) {
  sealerlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bcos.protocol.BlockHeaderHashFields.sealerList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockHeaderHashFields::sealerlist() const {
  // @@protoc_insertion_point(field_list:bcos.protocol.BlockHeaderHashFields.sealerList)
  return sealerlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockHeaderHashFields::mutable_sealerlist() {
  // @@protoc_insertion_point(field_mutable_list:bcos.protocol.BlockHeaderHashFields.sealerList)
  return &sealerlist_;
}

// bytes extraData = 12;
inline void BlockHeaderHashFields::clear_extradata() {
  extradata_.ClearToEmpty();
}
inline const std::string& BlockHeaderHashFields::extradata() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeaderHashFields.extraData)
  return _internal_extradata();
}
inline void BlockHeaderHashFields::set_extradata(const std::string& value) {
  _internal_set_extradata(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeaderHashFields.extraData)
}
inline std::string* BlockHeaderHashFields::mutable_extradata() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeaderHashFields.extraData)
  return _internal_mutable_extradata();
}
inline const std::string& BlockHeaderHashFields::_internal_extradata() const {
  return extradata_.Get();
}
inline void BlockHeaderHashFields::_internal_set_extradata(const std::string& value) {
  
  extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeaderHashFields::set_extradata(std::string&& value) {
  
  extradata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeaderHashFields.extraData)
}
inline void BlockHeaderHashFields::set_extradata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeaderHashFields.extraData)
}
inline void BlockHeaderHashFields::set_extradata(const void* value,
    size_t size) {
  
  extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeaderHashFields.extraData)
}
inline std::string* BlockHeaderHashFields::_internal_mutable_extradata() {
  
  return extradata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeaderHashFields::release_extradata() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeaderHashFields.extraData)
  return extradata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeaderHashFields::set_allocated_extradata(std::string* extradata) {
  if (extradata != nullptr) {
    
  } else {
    
  }
  extradata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extradata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeaderHashFields.extraData)
}

// -------------------------------------------------------------------

// BlockHeader

// bytes hashFieldsData = 1;
inline void BlockHeader::clear_hashfieldsdata() {
  hashfieldsdata_.ClearToEmpty();
}
inline const std::string& BlockHeader::hashfieldsdata() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeader.hashFieldsData)
  return _internal_hashfieldsdata();
}
inline void BlockHeader::set_hashfieldsdata(const std::string& value) {
  _internal_set_hashfieldsdata(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.BlockHeader.hashFieldsData)
}
inline std::string* BlockHeader::mutable_hashfieldsdata() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeader.hashFieldsData)
  return _internal_mutable_hashfieldsdata();
}
inline const std::string& BlockHeader::_internal_hashfieldsdata() const {
  return hashfieldsdata_.Get();
}
inline void BlockHeader::_internal_set_hashfieldsdata(const std::string& value) {
  
  hashfieldsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockHeader::set_hashfieldsdata(std::string&& value) {
  
  hashfieldsdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.BlockHeader.hashFieldsData)
}
inline void BlockHeader::set_hashfieldsdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashfieldsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.BlockHeader.hashFieldsData)
}
inline void BlockHeader::set_hashfieldsdata(const void* value,
    size_t size) {
  
  hashfieldsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.BlockHeader.hashFieldsData)
}
inline std::string* BlockHeader::_internal_mutable_hashfieldsdata() {
  
  return hashfieldsdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockHeader::release_hashfieldsdata() {
  // @@protoc_insertion_point(field_release:bcos.protocol.BlockHeader.hashFieldsData)
  return hashfieldsdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_hashfieldsdata(std::string* hashfieldsdata) {
  if (hashfieldsdata != nullptr) {
    
  } else {
    
  }
  hashfieldsdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashfieldsdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.BlockHeader.hashFieldsData)
}

// repeated .bcos.protocol.Signature signatureList = 2;
inline int BlockHeader::_internal_signaturelist_size() const {
  return signaturelist_.size();
}
inline int BlockHeader::signaturelist_size() const {
  return _internal_signaturelist_size();
}
inline ::bcos::protocol::Signature* BlockHeader::mutable_signaturelist(int index) {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.BlockHeader.signatureList)
  return signaturelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::Signature >*
BlockHeader::mutable_signaturelist() {
  // @@protoc_insertion_point(field_mutable_list:bcos.protocol.BlockHeader.signatureList)
  return &signaturelist_;
}
inline const ::bcos::protocol::Signature& BlockHeader::_internal_signaturelist(int index) const {
  return signaturelist_.Get(index);
}
inline const ::bcos::protocol::Signature& BlockHeader::signaturelist(int index) const {
  // @@protoc_insertion_point(field_get:bcos.protocol.BlockHeader.signatureList)
  return _internal_signaturelist(index);
}
inline ::bcos::protocol::Signature* BlockHeader::_internal_add_signaturelist() {
  return signaturelist_.Add();
}
inline ::bcos::protocol::Signature* BlockHeader::add_signaturelist() {
  // @@protoc_insertion_point(field_add:bcos.protocol.BlockHeader.signatureList)
  return _internal_add_signaturelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::Signature >&
BlockHeader::signaturelist() const {
  // @@protoc_insertion_point(field_list:bcos.protocol.BlockHeader.signatureList)
  return signaturelist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bcos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BlockHeader_2eproto
