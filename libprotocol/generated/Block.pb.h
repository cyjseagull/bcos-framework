// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BlockHeader.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Block_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Block_2eproto;
namespace bcos {
namespace protocol {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace protocol
}  // namespace bcos
PROTOBUF_NAMESPACE_OPEN
template<> ::bcos::protocol::Block* Arena::CreateMaybeMessage<::bcos::protocol::Block>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bcos {
namespace protocol {

// ===================================================================

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Block_2eproto);
    return ::descriptor_table_Block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kReceiptsFieldNumber = 4,
    kHeaderFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated bytes transactions = 3;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const void* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // repeated bytes receipts = 4;
  int receipts_size() const;
  private:
  int _internal_receipts_size() const;
  public:
  void clear_receipts();
  const std::string& receipts(int index) const;
  std::string* mutable_receipts(int index);
  void set_receipts(int index, const std::string& value);
  void set_receipts(int index, std::string&& value);
  void set_receipts(int index, const char* value);
  void set_receipts(int index, const void* value, size_t size);
  std::string* add_receipts();
  void add_receipts(const std::string& value);
  void add_receipts(std::string&& value);
  void add_receipts(const char* value);
  void add_receipts(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& receipts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_receipts();
  private:
  const std::string& _internal_receipts(int index) const;
  std::string* _internal_add_receipts();
  public:

  // .bcos.protocol.BlockHeader header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bcos::protocol::BlockHeader& header() const;
  ::bcos::protocol::BlockHeader* release_header();
  ::bcos::protocol::BlockHeader* mutable_header();
  void set_allocated_header(::bcos::protocol::BlockHeader* header);
  private:
  const ::bcos::protocol::BlockHeader& _internal_header() const;
  ::bcos::protocol::BlockHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bcos::protocol::BlockHeader* header);
  ::bcos::protocol::BlockHeader* unsafe_arena_release_header();

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> receipts_;
  ::bcos::protocol::BlockHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// int32 version = 1;
inline void Block::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Block::version() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Block.version)
  return _internal_version();
}
inline void Block::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void Block::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.Block.version)
}

// .bcos.protocol.BlockHeader header = 2;
inline bool Block::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Block::has_header() const {
  return _internal_has_header();
}
inline const ::bcos::protocol::BlockHeader& Block::_internal_header() const {
  const ::bcos::protocol::BlockHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::bcos::protocol::BlockHeader&>(
      ::bcos::protocol::_BlockHeader_default_instance_);
}
inline const ::bcos::protocol::BlockHeader& Block::header() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(
    ::bcos::protocol::BlockHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bcos.protocol.Block.header)
}
inline ::bcos::protocol::BlockHeader* Block::release_header() {
  
  ::bcos::protocol::BlockHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bcos::protocol::BlockHeader* Block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bcos.protocol.Block.header)
  
  ::bcos::protocol::BlockHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bcos::protocol::BlockHeader* Block::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bcos::protocol::BlockHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bcos::protocol::BlockHeader* Block::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.Block.header)
  return _internal_mutable_header();
}
inline void Block::set_allocated_header(::bcos::protocol::BlockHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.Block.header)
}

// repeated bytes transactions = 3;
inline int Block::_internal_transactions_size() const {
  return transactions_.size();
}
inline int Block::transactions_size() const {
  return _internal_transactions_size();
}
inline void Block::clear_transactions() {
  transactions_.Clear();
}
inline std::string* Block::add_transactions() {
  // @@protoc_insertion_point(field_add_mutable:bcos.protocol.Block.transactions)
  return _internal_add_transactions();
}
inline const std::string& Block::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const std::string& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Block.transactions)
  return _internal_transactions(index);
}
inline std::string* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.Block.transactions)
  return transactions_.Mutable(index);
}
inline void Block::set_transactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.Block.transactions)
  transactions_.Mutable(index)->assign(value);
}
inline void Block::set_transactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.Block.transactions)
  transactions_.Mutable(index)->assign(std::move(value));
}
inline void Block::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bcos.protocol.Block.transactions)
}
inline void Block::set_transactions(int index, const void* value, size_t size) {
  transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.Block.transactions)
}
inline std::string* Block::_internal_add_transactions() {
  return transactions_.Add();
}
inline void Block::add_transactions(const std::string& value) {
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bcos.protocol.Block.transactions)
}
inline void Block::add_transactions(std::string&& value) {
  transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bcos.protocol.Block.transactions)
}
inline void Block::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bcos.protocol.Block.transactions)
}
inline void Block::add_transactions(const void* value, size_t size) {
  transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bcos.protocol.Block.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:bcos.protocol.Block.transactions)
  return transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:bcos.protocol.Block.transactions)
  return &transactions_;
}

// repeated bytes receipts = 4;
inline int Block::_internal_receipts_size() const {
  return receipts_.size();
}
inline int Block::receipts_size() const {
  return _internal_receipts_size();
}
inline void Block::clear_receipts() {
  receipts_.Clear();
}
inline std::string* Block::add_receipts() {
  // @@protoc_insertion_point(field_add_mutable:bcos.protocol.Block.receipts)
  return _internal_add_receipts();
}
inline const std::string& Block::_internal_receipts(int index) const {
  return receipts_.Get(index);
}
inline const std::string& Block::receipts(int index) const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Block.receipts)
  return _internal_receipts(index);
}
inline std::string* Block::mutable_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.Block.receipts)
  return receipts_.Mutable(index);
}
inline void Block::set_receipts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.Block.receipts)
  receipts_.Mutable(index)->assign(value);
}
inline void Block::set_receipts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.Block.receipts)
  receipts_.Mutable(index)->assign(std::move(value));
}
inline void Block::set_receipts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  receipts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bcos.protocol.Block.receipts)
}
inline void Block::set_receipts(int index, const void* value, size_t size) {
  receipts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.Block.receipts)
}
inline std::string* Block::_internal_add_receipts() {
  return receipts_.Add();
}
inline void Block::add_receipts(const std::string& value) {
  receipts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bcos.protocol.Block.receipts)
}
inline void Block::add_receipts(std::string&& value) {
  receipts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bcos.protocol.Block.receipts)
}
inline void Block::add_receipts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  receipts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bcos.protocol.Block.receipts)
}
inline void Block::add_receipts(const void* value, size_t size) {
  receipts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bcos.protocol.Block.receipts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block::receipts() const {
  // @@protoc_insertion_point(field_list:bcos.protocol.Block.receipts)
  return receipts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block::mutable_receipts() {
  // @@protoc_insertion_point(field_mutable_list:bcos.protocol.Block.receipts)
  return &receipts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bcos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Block_2eproto
