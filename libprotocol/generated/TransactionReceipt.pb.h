// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransactionReceipt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TransactionReceipt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TransactionReceipt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TransactionReceipt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TransactionReceipt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TransactionReceipt_2eproto;
namespace bcos {
namespace protocol {
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class ReceiptHashFields;
class ReceiptHashFieldsDefaultTypeInternal;
extern ReceiptHashFieldsDefaultTypeInternal _ReceiptHashFields_default_instance_;
class TransactionReceipt;
class TransactionReceiptDefaultTypeInternal;
extern TransactionReceiptDefaultTypeInternal _TransactionReceipt_default_instance_;
}  // namespace protocol
}  // namespace bcos
PROTOBUF_NAMESPACE_OPEN
template<> ::bcos::protocol::LogEntry* Arena::CreateMaybeMessage<::bcos::protocol::LogEntry>(Arena*);
template<> ::bcos::protocol::ReceiptHashFields* Arena::CreateMaybeMessage<::bcos::protocol::ReceiptHashFields>(Arena*);
template<> ::bcos::protocol::TransactionReceipt* Arena::CreateMaybeMessage<::bcos::protocol::TransactionReceipt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bcos {
namespace protocol {

// ===================================================================

class LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransactionReceipt_2eproto);
    return ::descriptor_table_TransactionReceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 2,
    kAddressFieldNumber = 1,
    kDataFieldNumber = 3,
  };
  // repeated bytes topics = 2;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const void* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransactionReceipt_2eproto;
};
// -------------------------------------------------------------------

class ReceiptHashFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.ReceiptHashFields) */ {
 public:
  inline ReceiptHashFields() : ReceiptHashFields(nullptr) {}
  virtual ~ReceiptHashFields();

  ReceiptHashFields(const ReceiptHashFields& from);
  ReceiptHashFields(ReceiptHashFields&& from) noexcept
    : ReceiptHashFields() {
    *this = ::std::move(from);
  }

  inline ReceiptHashFields& operator=(const ReceiptHashFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiptHashFields& operator=(ReceiptHashFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceiptHashFields& default_instance();

  static inline const ReceiptHashFields* internal_default_instance() {
    return reinterpret_cast<const ReceiptHashFields*>(
               &_ReceiptHashFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReceiptHashFields& a, ReceiptHashFields& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiptHashFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiptHashFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceiptHashFields* New() const final {
    return CreateMaybeMessage<ReceiptHashFields>(nullptr);
  }

  ReceiptHashFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceiptHashFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceiptHashFields& from);
  void MergeFrom(const ReceiptHashFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiptHashFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.ReceiptHashFields";
  }
  protected:
  explicit ReceiptHashFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransactionReceipt_2eproto);
    return ::descriptor_table_TransactionReceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogEntriesFieldNumber = 7,
    kStateRootFieldNumber = 2,
    kGasUsedFieldNumber = 3,
    kContractAddressFieldNumber = 4,
    kBloomFieldNumber = 5,
    kOuptputFieldNumber = 8,
    kVersionFieldNumber = 1,
    kStatusFieldNumber = 6,
  };
  // repeated .bcos.protocol.LogEntry logEntries = 7;
  int logentries_size() const;
  private:
  int _internal_logentries_size() const;
  public:
  void clear_logentries();
  ::bcos::protocol::LogEntry* mutable_logentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::LogEntry >*
      mutable_logentries();
  private:
  const ::bcos::protocol::LogEntry& _internal_logentries(int index) const;
  ::bcos::protocol::LogEntry* _internal_add_logentries();
  public:
  const ::bcos::protocol::LogEntry& logentries(int index) const;
  ::bcos::protocol::LogEntry* add_logentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::LogEntry >&
      logentries() const;

  // bytes stateRoot = 2;
  void clear_stateroot();
  const std::string& stateroot() const;
  void set_stateroot(const std::string& value);
  void set_stateroot(std::string&& value);
  void set_stateroot(const char* value);
  void set_stateroot(const void* value, size_t size);
  std::string* mutable_stateroot();
  std::string* release_stateroot();
  void set_allocated_stateroot(std::string* stateroot);
  private:
  const std::string& _internal_stateroot() const;
  void _internal_set_stateroot(const std::string& value);
  std::string* _internal_mutable_stateroot();
  public:

  // bytes gasUsed = 3;
  void clear_gasused();
  const std::string& gasused() const;
  void set_gasused(const std::string& value);
  void set_gasused(std::string&& value);
  void set_gasused(const char* value);
  void set_gasused(const void* value, size_t size);
  std::string* mutable_gasused();
  std::string* release_gasused();
  void set_allocated_gasused(std::string* gasused);
  private:
  const std::string& _internal_gasused() const;
  void _internal_set_gasused(const std::string& value);
  std::string* _internal_mutable_gasused();
  public:

  // bytes contractAddress = 4;
  void clear_contractaddress();
  const std::string& contractaddress() const;
  void set_contractaddress(const std::string& value);
  void set_contractaddress(std::string&& value);
  void set_contractaddress(const char* value);
  void set_contractaddress(const void* value, size_t size);
  std::string* mutable_contractaddress();
  std::string* release_contractaddress();
  void set_allocated_contractaddress(std::string* contractaddress);
  private:
  const std::string& _internal_contractaddress() const;
  void _internal_set_contractaddress(const std::string& value);
  std::string* _internal_mutable_contractaddress();
  public:

  // bytes bloom = 5;
  void clear_bloom();
  const std::string& bloom() const;
  void set_bloom(const std::string& value);
  void set_bloom(std::string&& value);
  void set_bloom(const char* value);
  void set_bloom(const void* value, size_t size);
  std::string* mutable_bloom();
  std::string* release_bloom();
  void set_allocated_bloom(std::string* bloom);
  private:
  const std::string& _internal_bloom() const;
  void _internal_set_bloom(const std::string& value);
  std::string* _internal_mutable_bloom();
  public:

  // bytes ouptput = 8;
  void clear_ouptput();
  const std::string& ouptput() const;
  void set_ouptput(const std::string& value);
  void set_ouptput(std::string&& value);
  void set_ouptput(const char* value);
  void set_ouptput(const void* value, size_t size);
  std::string* mutable_ouptput();
  std::string* release_ouptput();
  void set_allocated_ouptput(std::string* ouptput);
  private:
  const std::string& _internal_ouptput() const;
  void _internal_set_ouptput(const std::string& value);
  std::string* _internal_mutable_ouptput();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 6;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.ReceiptHashFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::LogEntry > logentries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stateroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasused_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bloom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ouptput_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransactionReceipt_2eproto;
};
// -------------------------------------------------------------------

class TransactionReceipt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.TransactionReceipt) */ {
 public:
  inline TransactionReceipt() : TransactionReceipt(nullptr) {}
  virtual ~TransactionReceipt();

  TransactionReceipt(const TransactionReceipt& from);
  TransactionReceipt(TransactionReceipt&& from) noexcept
    : TransactionReceipt() {
    *this = ::std::move(from);
  }

  inline TransactionReceipt& operator=(const TransactionReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionReceipt& operator=(TransactionReceipt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionReceipt& default_instance();

  static inline const TransactionReceipt* internal_default_instance() {
    return reinterpret_cast<const TransactionReceipt*>(
               &_TransactionReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionReceipt& a, TransactionReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionReceipt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionReceipt* New() const final {
    return CreateMaybeMessage<TransactionReceipt>(nullptr);
  }

  TransactionReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionReceipt& from);
  void MergeFrom(const TransactionReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.TransactionReceipt";
  }
  protected:
  explicit TransactionReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransactionReceipt_2eproto);
    return ::descriptor_table_TransactionReceipt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldsDataFieldNumber = 1,
  };
  // bytes hashFieldsData = 1;
  void clear_hashfieldsdata();
  const std::string& hashfieldsdata() const;
  void set_hashfieldsdata(const std::string& value);
  void set_hashfieldsdata(std::string&& value);
  void set_hashfieldsdata(const char* value);
  void set_hashfieldsdata(const void* value, size_t size);
  std::string* mutable_hashfieldsdata();
  std::string* release_hashfieldsdata();
  void set_allocated_hashfieldsdata(std::string* hashfieldsdata);
  private:
  const std::string& _internal_hashfieldsdata() const;
  void _internal_set_hashfieldsdata(const std::string& value);
  std::string* _internal_mutable_hashfieldsdata();
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.TransactionReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashfieldsdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransactionReceipt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// bytes address = 1;
inline void LogEntry::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& LogEntry::address() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.LogEntry.address)
  return _internal_address();
}
inline void LogEntry::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.LogEntry.address)
}
inline std::string* LogEntry::mutable_address() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.LogEntry.address)
  return _internal_mutable_address();
}
inline const std::string& LogEntry::_internal_address() const {
  return address_.Get();
}
inline void LogEntry::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.LogEntry.address)
}
inline void LogEntry::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.LogEntry.address)
}
inline void LogEntry::set_address(const void* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.LogEntry.address)
}
inline std::string* LogEntry::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_address() {
  // @@protoc_insertion_point(field_release:bcos.protocol.LogEntry.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.LogEntry.address)
}

// repeated bytes topics = 2;
inline int LogEntry::_internal_topics_size() const {
  return topics_.size();
}
inline int LogEntry::topics_size() const {
  return _internal_topics_size();
}
inline void LogEntry::clear_topics() {
  topics_.Clear();
}
inline std::string* LogEntry::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:bcos.protocol.LogEntry.topics)
  return _internal_add_topics();
}
inline const std::string& LogEntry::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const std::string& LogEntry::topics(int index) const {
  // @@protoc_insertion_point(field_get:bcos.protocol.LogEntry.topics)
  return _internal_topics(index);
}
inline std::string* LogEntry::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.LogEntry.topics)
  return topics_.Mutable(index);
}
inline void LogEntry::set_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.LogEntry.topics)
  topics_.Mutable(index)->assign(value);
}
inline void LogEntry::set_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bcos.protocol.LogEntry.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
inline void LogEntry::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bcos.protocol.LogEntry.topics)
}
inline void LogEntry::set_topics(int index, const void* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.LogEntry.topics)
}
inline std::string* LogEntry::_internal_add_topics() {
  return topics_.Add();
}
inline void LogEntry::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bcos.protocol.LogEntry.topics)
}
inline void LogEntry::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bcos.protocol.LogEntry.topics)
}
inline void LogEntry::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bcos.protocol.LogEntry.topics)
}
inline void LogEntry::add_topics(const void* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bcos.protocol.LogEntry.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogEntry::topics() const {
  // @@protoc_insertion_point(field_list:bcos.protocol.LogEntry.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogEntry::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:bcos.protocol.LogEntry.topics)
  return &topics_;
}

// bytes data = 3;
inline void LogEntry::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& LogEntry::data() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.LogEntry.data)
  return _internal_data();
}
inline void LogEntry::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.LogEntry.data)
}
inline std::string* LogEntry::mutable_data() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.LogEntry.data)
  return _internal_mutable_data();
}
inline const std::string& LogEntry::_internal_data() const {
  return data_.Get();
}
inline void LogEntry::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogEntry::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.LogEntry.data)
}
inline void LogEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.LogEntry.data)
}
inline void LogEntry::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.LogEntry.data)
}
inline std::string* LogEntry::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogEntry::release_data() {
  // @@protoc_insertion_point(field_release:bcos.protocol.LogEntry.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.LogEntry.data)
}

// -------------------------------------------------------------------

// ReceiptHashFields

// int32 version = 1;
inline void ReceiptHashFields::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiptHashFields::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiptHashFields::version() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.version)
  return _internal_version();
}
inline void ReceiptHashFields::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void ReceiptHashFields::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.version)
}

// bytes stateRoot = 2;
inline void ReceiptHashFields::clear_stateroot() {
  stateroot_.ClearToEmpty();
}
inline const std::string& ReceiptHashFields::stateroot() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.stateRoot)
  return _internal_stateroot();
}
inline void ReceiptHashFields::set_stateroot(const std::string& value) {
  _internal_set_stateroot(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.stateRoot)
}
inline std::string* ReceiptHashFields::mutable_stateroot() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.ReceiptHashFields.stateRoot)
  return _internal_mutable_stateroot();
}
inline const std::string& ReceiptHashFields::_internal_stateroot() const {
  return stateroot_.Get();
}
inline void ReceiptHashFields::_internal_set_stateroot(const std::string& value) {
  
  stateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiptHashFields::set_stateroot(std::string&& value) {
  
  stateroot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.ReceiptHashFields.stateRoot)
}
inline void ReceiptHashFields::set_stateroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.ReceiptHashFields.stateRoot)
}
inline void ReceiptHashFields::set_stateroot(const void* value,
    size_t size) {
  
  stateroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.ReceiptHashFields.stateRoot)
}
inline std::string* ReceiptHashFields::_internal_mutable_stateroot() {
  
  return stateroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiptHashFields::release_stateroot() {
  // @@protoc_insertion_point(field_release:bcos.protocol.ReceiptHashFields.stateRoot)
  return stateroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiptHashFields::set_allocated_stateroot(std::string* stateroot) {
  if (stateroot != nullptr) {
    
  } else {
    
  }
  stateroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stateroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.ReceiptHashFields.stateRoot)
}

// bytes gasUsed = 3;
inline void ReceiptHashFields::clear_gasused() {
  gasused_.ClearToEmpty();
}
inline const std::string& ReceiptHashFields::gasused() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.gasUsed)
  return _internal_gasused();
}
inline void ReceiptHashFields::set_gasused(const std::string& value) {
  _internal_set_gasused(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.gasUsed)
}
inline std::string* ReceiptHashFields::mutable_gasused() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.ReceiptHashFields.gasUsed)
  return _internal_mutable_gasused();
}
inline const std::string& ReceiptHashFields::_internal_gasused() const {
  return gasused_.Get();
}
inline void ReceiptHashFields::_internal_set_gasused(const std::string& value) {
  
  gasused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiptHashFields::set_gasused(std::string&& value) {
  
  gasused_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.ReceiptHashFields.gasUsed)
}
inline void ReceiptHashFields::set_gasused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.ReceiptHashFields.gasUsed)
}
inline void ReceiptHashFields::set_gasused(const void* value,
    size_t size) {
  
  gasused_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.ReceiptHashFields.gasUsed)
}
inline std::string* ReceiptHashFields::_internal_mutable_gasused() {
  
  return gasused_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiptHashFields::release_gasused() {
  // @@protoc_insertion_point(field_release:bcos.protocol.ReceiptHashFields.gasUsed)
  return gasused_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiptHashFields::set_allocated_gasused(std::string* gasused) {
  if (gasused != nullptr) {
    
  } else {
    
  }
  gasused_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasused,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.ReceiptHashFields.gasUsed)
}

// bytes contractAddress = 4;
inline void ReceiptHashFields::clear_contractaddress() {
  contractaddress_.ClearToEmpty();
}
inline const std::string& ReceiptHashFields::contractaddress() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.contractAddress)
  return _internal_contractaddress();
}
inline void ReceiptHashFields::set_contractaddress(const std::string& value) {
  _internal_set_contractaddress(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.contractAddress)
}
inline std::string* ReceiptHashFields::mutable_contractaddress() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.ReceiptHashFields.contractAddress)
  return _internal_mutable_contractaddress();
}
inline const std::string& ReceiptHashFields::_internal_contractaddress() const {
  return contractaddress_.Get();
}
inline void ReceiptHashFields::_internal_set_contractaddress(const std::string& value) {
  
  contractaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiptHashFields::set_contractaddress(std::string&& value) {
  
  contractaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.ReceiptHashFields.contractAddress)
}
inline void ReceiptHashFields::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.ReceiptHashFields.contractAddress)
}
inline void ReceiptHashFields::set_contractaddress(const void* value,
    size_t size) {
  
  contractaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.ReceiptHashFields.contractAddress)
}
inline std::string* ReceiptHashFields::_internal_mutable_contractaddress() {
  
  return contractaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiptHashFields::release_contractaddress() {
  // @@protoc_insertion_point(field_release:bcos.protocol.ReceiptHashFields.contractAddress)
  return contractaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiptHashFields::set_allocated_contractaddress(std::string* contractaddress) {
  if (contractaddress != nullptr) {
    
  } else {
    
  }
  contractaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.ReceiptHashFields.contractAddress)
}

// bytes bloom = 5;
inline void ReceiptHashFields::clear_bloom() {
  bloom_.ClearToEmpty();
}
inline const std::string& ReceiptHashFields::bloom() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.bloom)
  return _internal_bloom();
}
inline void ReceiptHashFields::set_bloom(const std::string& value) {
  _internal_set_bloom(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.bloom)
}
inline std::string* ReceiptHashFields::mutable_bloom() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.ReceiptHashFields.bloom)
  return _internal_mutable_bloom();
}
inline const std::string& ReceiptHashFields::_internal_bloom() const {
  return bloom_.Get();
}
inline void ReceiptHashFields::_internal_set_bloom(const std::string& value) {
  
  bloom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiptHashFields::set_bloom(std::string&& value) {
  
  bloom_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.ReceiptHashFields.bloom)
}
inline void ReceiptHashFields::set_bloom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bloom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.ReceiptHashFields.bloom)
}
inline void ReceiptHashFields::set_bloom(const void* value,
    size_t size) {
  
  bloom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.ReceiptHashFields.bloom)
}
inline std::string* ReceiptHashFields::_internal_mutable_bloom() {
  
  return bloom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiptHashFields::release_bloom() {
  // @@protoc_insertion_point(field_release:bcos.protocol.ReceiptHashFields.bloom)
  return bloom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiptHashFields::set_allocated_bloom(std::string* bloom) {
  if (bloom != nullptr) {
    
  } else {
    
  }
  bloom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bloom,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.ReceiptHashFields.bloom)
}

// int32 status = 6;
inline void ReceiptHashFields::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiptHashFields::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiptHashFields::status() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.status)
  return _internal_status();
}
inline void ReceiptHashFields::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ReceiptHashFields::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.status)
}

// repeated .bcos.protocol.LogEntry logEntries = 7;
inline int ReceiptHashFields::_internal_logentries_size() const {
  return logentries_.size();
}
inline int ReceiptHashFields::logentries_size() const {
  return _internal_logentries_size();
}
inline void ReceiptHashFields::clear_logentries() {
  logentries_.Clear();
}
inline ::bcos::protocol::LogEntry* ReceiptHashFields::mutable_logentries(int index) {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.ReceiptHashFields.logEntries)
  return logentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::LogEntry >*
ReceiptHashFields::mutable_logentries() {
  // @@protoc_insertion_point(field_mutable_list:bcos.protocol.ReceiptHashFields.logEntries)
  return &logentries_;
}
inline const ::bcos::protocol::LogEntry& ReceiptHashFields::_internal_logentries(int index) const {
  return logentries_.Get(index);
}
inline const ::bcos::protocol::LogEntry& ReceiptHashFields::logentries(int index) const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.logEntries)
  return _internal_logentries(index);
}
inline ::bcos::protocol::LogEntry* ReceiptHashFields::_internal_add_logentries() {
  return logentries_.Add();
}
inline ::bcos::protocol::LogEntry* ReceiptHashFields::add_logentries() {
  // @@protoc_insertion_point(field_add:bcos.protocol.ReceiptHashFields.logEntries)
  return _internal_add_logentries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcos::protocol::LogEntry >&
ReceiptHashFields::logentries() const {
  // @@protoc_insertion_point(field_list:bcos.protocol.ReceiptHashFields.logEntries)
  return logentries_;
}

// bytes ouptput = 8;
inline void ReceiptHashFields::clear_ouptput() {
  ouptput_.ClearToEmpty();
}
inline const std::string& ReceiptHashFields::ouptput() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.ReceiptHashFields.ouptput)
  return _internal_ouptput();
}
inline void ReceiptHashFields::set_ouptput(const std::string& value) {
  _internal_set_ouptput(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.ReceiptHashFields.ouptput)
}
inline std::string* ReceiptHashFields::mutable_ouptput() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.ReceiptHashFields.ouptput)
  return _internal_mutable_ouptput();
}
inline const std::string& ReceiptHashFields::_internal_ouptput() const {
  return ouptput_.Get();
}
inline void ReceiptHashFields::_internal_set_ouptput(const std::string& value) {
  
  ouptput_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceiptHashFields::set_ouptput(std::string&& value) {
  
  ouptput_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.ReceiptHashFields.ouptput)
}
inline void ReceiptHashFields::set_ouptput(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ouptput_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.ReceiptHashFields.ouptput)
}
inline void ReceiptHashFields::set_ouptput(const void* value,
    size_t size) {
  
  ouptput_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.ReceiptHashFields.ouptput)
}
inline std::string* ReceiptHashFields::_internal_mutable_ouptput() {
  
  return ouptput_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceiptHashFields::release_ouptput() {
  // @@protoc_insertion_point(field_release:bcos.protocol.ReceiptHashFields.ouptput)
  return ouptput_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceiptHashFields::set_allocated_ouptput(std::string* ouptput) {
  if (ouptput != nullptr) {
    
  } else {
    
  }
  ouptput_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ouptput,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.ReceiptHashFields.ouptput)
}

// -------------------------------------------------------------------

// TransactionReceipt

// bytes hashFieldsData = 1;
inline void TransactionReceipt::clear_hashfieldsdata() {
  hashfieldsdata_.ClearToEmpty();
}
inline const std::string& TransactionReceipt::hashfieldsdata() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionReceipt.hashFieldsData)
  return _internal_hashfieldsdata();
}
inline void TransactionReceipt::set_hashfieldsdata(const std::string& value) {
  _internal_set_hashfieldsdata(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionReceipt.hashFieldsData)
}
inline std::string* TransactionReceipt::mutable_hashfieldsdata() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.TransactionReceipt.hashFieldsData)
  return _internal_mutable_hashfieldsdata();
}
inline const std::string& TransactionReceipt::_internal_hashfieldsdata() const {
  return hashfieldsdata_.Get();
}
inline void TransactionReceipt::_internal_set_hashfieldsdata(const std::string& value) {
  
  hashfieldsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionReceipt::set_hashfieldsdata(std::string&& value) {
  
  hashfieldsdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.TransactionReceipt.hashFieldsData)
}
inline void TransactionReceipt::set_hashfieldsdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashfieldsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.TransactionReceipt.hashFieldsData)
}
inline void TransactionReceipt::set_hashfieldsdata(const void* value,
    size_t size) {
  
  hashfieldsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.TransactionReceipt.hashFieldsData)
}
inline std::string* TransactionReceipt::_internal_mutable_hashfieldsdata() {
  
  return hashfieldsdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionReceipt::release_hashfieldsdata() {
  // @@protoc_insertion_point(field_release:bcos.protocol.TransactionReceipt.hashFieldsData)
  return hashfieldsdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionReceipt::set_allocated_hashfieldsdata(std::string* hashfieldsdata) {
  if (hashfieldsdata != nullptr) {
    
  } else {
    
  }
  hashfieldsdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashfieldsdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.TransactionReceipt.hashFieldsData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bcos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TransactionReceipt_2eproto
