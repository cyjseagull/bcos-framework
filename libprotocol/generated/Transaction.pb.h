// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Transaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Transaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Transaction_2eproto;
namespace bcos {
namespace protocol {
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionHashFields;
class TransactionHashFieldsDefaultTypeInternal;
extern TransactionHashFieldsDefaultTypeInternal _TransactionHashFields_default_instance_;
}  // namespace protocol
}  // namespace bcos
PROTOBUF_NAMESPACE_OPEN
template<> ::bcos::protocol::Transaction* Arena::CreateMaybeMessage<::bcos::protocol::Transaction>(Arena*);
template<> ::bcos::protocol::TransactionHashFields* Arena::CreateMaybeMessage<::bcos::protocol::TransactionHashFields>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bcos {
namespace protocol {

// ===================================================================

class TransactionHashFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.TransactionHashFields) */ {
 public:
  inline TransactionHashFields() : TransactionHashFields(nullptr) {}
  virtual ~TransactionHashFields();

  TransactionHashFields(const TransactionHashFields& from);
  TransactionHashFields(TransactionHashFields&& from) noexcept
    : TransactionHashFields() {
    *this = ::std::move(from);
  }

  inline TransactionHashFields& operator=(const TransactionHashFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionHashFields& operator=(TransactionHashFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionHashFields& default_instance();

  static inline const TransactionHashFields* internal_default_instance() {
    return reinterpret_cast<const TransactionHashFields*>(
               &_TransactionHashFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionHashFields& a, TransactionHashFields& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionHashFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionHashFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionHashFields* New() const final {
    return CreateMaybeMessage<TransactionHashFields>(nullptr);
  }

  TransactionHashFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionHashFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionHashFields& from);
  void MergeFrom(const TransactionHashFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionHashFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.TransactionHashFields";
  }
  protected:
  explicit TransactionHashFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Transaction_2eproto);
    return ::descriptor_table_Transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 3,
    kGroupIdFieldNumber = 4,
    kToFieldNumber = 6,
    kInputFieldNumber = 7,
    kTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
    kBlockLimitFieldNumber = 5,
  };
  // bytes chainId = 3;
  void clear_chainid();
  const std::string& chainid() const;
  void set_chainid(const std::string& value);
  void set_chainid(std::string&& value);
  void set_chainid(const char* value);
  void set_chainid(const void* value, size_t size);
  std::string* mutable_chainid();
  std::string* release_chainid();
  void set_allocated_chainid(std::string* chainid);
  private:
  const std::string& _internal_chainid() const;
  void _internal_set_chainid(const std::string& value);
  std::string* _internal_mutable_chainid();
  public:

  // bytes groupId = 4;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const void* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // bytes to = 6;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes input = 7;
  void clear_input();
  const std::string& input() const;
  void set_input(const std::string& value);
  void set_input(std::string&& value);
  void set_input(const char* value);
  void set_input(const void* value, size_t size);
  std::string* mutable_input();
  std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 blockLimit = 5;
  void clear_blocklimit();
  ::PROTOBUF_NAMESPACE_ID::int64 blocklimit() const;
  void set_blocklimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_blocklimit() const;
  void _internal_set_blocklimit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.TransactionHashFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocklimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcos.protocol.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcos.protocol.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Transaction_2eproto);
    return ::descriptor_table_Transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFiledsDataFieldNumber = 1,
    kSigantureDataFieldNumber = 2,
    kImportTimeFieldNumber = 12,
  };
  // bytes hashFiledsData = 1;
  void clear_hashfiledsdata();
  const std::string& hashfiledsdata() const;
  void set_hashfiledsdata(const std::string& value);
  void set_hashfiledsdata(std::string&& value);
  void set_hashfiledsdata(const char* value);
  void set_hashfiledsdata(const void* value, size_t size);
  std::string* mutable_hashfiledsdata();
  std::string* release_hashfiledsdata();
  void set_allocated_hashfiledsdata(std::string* hashfiledsdata);
  private:
  const std::string& _internal_hashfiledsdata() const;
  void _internal_set_hashfiledsdata(const std::string& value);
  std::string* _internal_mutable_hashfiledsdata();
  public:

  // bytes sigantureData = 2;
  void clear_siganturedata();
  const std::string& siganturedata() const;
  void set_siganturedata(const std::string& value);
  void set_siganturedata(std::string&& value);
  void set_siganturedata(const char* value);
  void set_siganturedata(const void* value, size_t size);
  std::string* mutable_siganturedata();
  std::string* release_siganturedata();
  void set_allocated_siganturedata(std::string* siganturedata);
  private:
  const std::string& _internal_siganturedata() const;
  void _internal_set_siganturedata(const std::string& value);
  std::string* _internal_mutable_siganturedata();
  public:

  // int64 import_time = 12;
  void clear_import_time();
  ::PROTOBUF_NAMESPACE_ID::int64 import_time() const;
  void set_import_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_import_time() const;
  void _internal_set_import_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bcos.protocol.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashfiledsdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr siganturedata_;
  ::PROTOBUF_NAMESPACE_ID::int64 import_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionHashFields

// int32 type = 1;
inline void TransactionHashFields::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionHashFields::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionHashFields::type() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.type)
  return _internal_type();
}
inline void TransactionHashFields::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void TransactionHashFields::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.type)
}

// int32 version = 2;
inline void TransactionHashFields::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionHashFields::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionHashFields::version() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.version)
  return _internal_version();
}
inline void TransactionHashFields::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void TransactionHashFields::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.version)
}

// bytes chainId = 3;
inline void TransactionHashFields::clear_chainid() {
  chainid_.ClearToEmpty();
}
inline const std::string& TransactionHashFields::chainid() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.chainId)
  return _internal_chainid();
}
inline void TransactionHashFields::set_chainid(const std::string& value) {
  _internal_set_chainid(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.chainId)
}
inline std::string* TransactionHashFields::mutable_chainid() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.TransactionHashFields.chainId)
  return _internal_mutable_chainid();
}
inline const std::string& TransactionHashFields::_internal_chainid() const {
  return chainid_.Get();
}
inline void TransactionHashFields::_internal_set_chainid(const std::string& value) {
  
  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionHashFields::set_chainid(std::string&& value) {
  
  chainid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.TransactionHashFields.chainId)
}
inline void TransactionHashFields::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.TransactionHashFields.chainId)
}
inline void TransactionHashFields::set_chainid(const void* value,
    size_t size) {
  
  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.TransactionHashFields.chainId)
}
inline std::string* TransactionHashFields::_internal_mutable_chainid() {
  
  return chainid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionHashFields::release_chainid() {
  // @@protoc_insertion_point(field_release:bcos.protocol.TransactionHashFields.chainId)
  return chainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionHashFields::set_allocated_chainid(std::string* chainid) {
  if (chainid != nullptr) {
    
  } else {
    
  }
  chainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.TransactionHashFields.chainId)
}

// bytes groupId = 4;
inline void TransactionHashFields::clear_groupid() {
  groupid_.ClearToEmpty();
}
inline const std::string& TransactionHashFields::groupid() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.groupId)
  return _internal_groupid();
}
inline void TransactionHashFields::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.groupId)
}
inline std::string* TransactionHashFields::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.TransactionHashFields.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& TransactionHashFields::_internal_groupid() const {
  return groupid_.Get();
}
inline void TransactionHashFields::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionHashFields::set_groupid(std::string&& value) {
  
  groupid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.TransactionHashFields.groupId)
}
inline void TransactionHashFields::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.TransactionHashFields.groupId)
}
inline void TransactionHashFields::set_groupid(const void* value,
    size_t size) {
  
  groupid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.TransactionHashFields.groupId)
}
inline std::string* TransactionHashFields::_internal_mutable_groupid() {
  
  return groupid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionHashFields::release_groupid() {
  // @@protoc_insertion_point(field_release:bcos.protocol.TransactionHashFields.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionHashFields::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.TransactionHashFields.groupId)
}

// int64 blockLimit = 5;
inline void TransactionHashFields::clear_blocklimit() {
  blocklimit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionHashFields::_internal_blocklimit() const {
  return blocklimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionHashFields::blocklimit() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.blockLimit)
  return _internal_blocklimit();
}
inline void TransactionHashFields::_internal_set_blocklimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocklimit_ = value;
}
inline void TransactionHashFields::set_blocklimit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_blocklimit(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.blockLimit)
}

// bytes to = 6;
inline void TransactionHashFields::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& TransactionHashFields::to() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.to)
  return _internal_to();
}
inline void TransactionHashFields::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.to)
}
inline std::string* TransactionHashFields::mutable_to() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.TransactionHashFields.to)
  return _internal_mutable_to();
}
inline const std::string& TransactionHashFields::_internal_to() const {
  return to_.Get();
}
inline void TransactionHashFields::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionHashFields::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.TransactionHashFields.to)
}
inline void TransactionHashFields::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.TransactionHashFields.to)
}
inline void TransactionHashFields::set_to(const void* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.TransactionHashFields.to)
}
inline std::string* TransactionHashFields::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionHashFields::release_to() {
  // @@protoc_insertion_point(field_release:bcos.protocol.TransactionHashFields.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionHashFields::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.TransactionHashFields.to)
}

// bytes input = 7;
inline void TransactionHashFields::clear_input() {
  input_.ClearToEmpty();
}
inline const std::string& TransactionHashFields::input() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.TransactionHashFields.input)
  return _internal_input();
}
inline void TransactionHashFields::set_input(const std::string& value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.TransactionHashFields.input)
}
inline std::string* TransactionHashFields::mutable_input() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.TransactionHashFields.input)
  return _internal_mutable_input();
}
inline const std::string& TransactionHashFields::_internal_input() const {
  return input_.Get();
}
inline void TransactionHashFields::_internal_set_input(const std::string& value) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionHashFields::set_input(std::string&& value) {
  
  input_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.TransactionHashFields.input)
}
inline void TransactionHashFields::set_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.TransactionHashFields.input)
}
inline void TransactionHashFields::set_input(const void* value,
    size_t size) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.TransactionHashFields.input)
}
inline std::string* TransactionHashFields::_internal_mutable_input() {
  
  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionHashFields::release_input() {
  // @@protoc_insertion_point(field_release:bcos.protocol.TransactionHashFields.input)
  return input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionHashFields::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.TransactionHashFields.input)
}

// -------------------------------------------------------------------

// Transaction

// bytes hashFiledsData = 1;
inline void Transaction::clear_hashfiledsdata() {
  hashfiledsdata_.ClearToEmpty();
}
inline const std::string& Transaction::hashfiledsdata() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Transaction.hashFiledsData)
  return _internal_hashfiledsdata();
}
inline void Transaction::set_hashfiledsdata(const std::string& value) {
  _internal_set_hashfiledsdata(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.Transaction.hashFiledsData)
}
inline std::string* Transaction::mutable_hashfiledsdata() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.Transaction.hashFiledsData)
  return _internal_mutable_hashfiledsdata();
}
inline const std::string& Transaction::_internal_hashfiledsdata() const {
  return hashfiledsdata_.Get();
}
inline void Transaction::_internal_set_hashfiledsdata(const std::string& value) {
  
  hashfiledsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_hashfiledsdata(std::string&& value) {
  
  hashfiledsdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.Transaction.hashFiledsData)
}
inline void Transaction::set_hashfiledsdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hashfiledsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.Transaction.hashFiledsData)
}
inline void Transaction::set_hashfiledsdata(const void* value,
    size_t size) {
  
  hashfiledsdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.Transaction.hashFiledsData)
}
inline std::string* Transaction::_internal_mutable_hashfiledsdata() {
  
  return hashfiledsdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_hashfiledsdata() {
  // @@protoc_insertion_point(field_release:bcos.protocol.Transaction.hashFiledsData)
  return hashfiledsdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_hashfiledsdata(std::string* hashfiledsdata) {
  if (hashfiledsdata != nullptr) {
    
  } else {
    
  }
  hashfiledsdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashfiledsdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.Transaction.hashFiledsData)
}

// bytes sigantureData = 2;
inline void Transaction::clear_siganturedata() {
  siganturedata_.ClearToEmpty();
}
inline const std::string& Transaction::siganturedata() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Transaction.sigantureData)
  return _internal_siganturedata();
}
inline void Transaction::set_siganturedata(const std::string& value) {
  _internal_set_siganturedata(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.Transaction.sigantureData)
}
inline std::string* Transaction::mutable_siganturedata() {
  // @@protoc_insertion_point(field_mutable:bcos.protocol.Transaction.sigantureData)
  return _internal_mutable_siganturedata();
}
inline const std::string& Transaction::_internal_siganturedata() const {
  return siganturedata_.Get();
}
inline void Transaction::_internal_set_siganturedata(const std::string& value) {
  
  siganturedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_siganturedata(std::string&& value) {
  
  siganturedata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcos.protocol.Transaction.sigantureData)
}
inline void Transaction::set_siganturedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  siganturedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcos.protocol.Transaction.sigantureData)
}
inline void Transaction::set_siganturedata(const void* value,
    size_t size) {
  
  siganturedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcos.protocol.Transaction.sigantureData)
}
inline std::string* Transaction::_internal_mutable_siganturedata() {
  
  return siganturedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_siganturedata() {
  // @@protoc_insertion_point(field_release:bcos.protocol.Transaction.sigantureData)
  return siganturedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_siganturedata(std::string* siganturedata) {
  if (siganturedata != nullptr) {
    
  } else {
    
  }
  siganturedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), siganturedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcos.protocol.Transaction.sigantureData)
}

// int64 import_time = 12;
inline void Transaction::clear_import_time() {
  import_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_import_time() const {
  return import_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::import_time() const {
  // @@protoc_insertion_point(field_get:bcos.protocol.Transaction.import_time)
  return _internal_import_time();
}
inline void Transaction::_internal_set_import_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  import_time_ = value;
}
inline void Transaction::set_import_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_import_time(value);
  // @@protoc_insertion_point(field_set:bcos.protocol.Transaction.import_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bcos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Transaction_2eproto
